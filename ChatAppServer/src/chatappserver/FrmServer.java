/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatappserver;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;

/**
 *
 * @author MERT
 */
public class FrmServer extends javax.swing.JFrame {

    /**
     * Creates new form FrmServer
     */
    ArrayList clientOutputStreams;
    ArrayList<String> users;

    public class ClientHandler implements Runnable {

        BufferedReader reader;
        Socket S;
        PrintWriter client;

        public ClientHandler(Socket clientSocket, PrintWriter user) {
            client = user;
            try {
                S = clientSocket;
                InputStreamReader isReader = new InputStreamReader(S.getInputStream());
                reader = new BufferedReader(isReader);
            } catch (Exception e) {
                jTextArea1.append("Unexpected error. . . \n");
            }
        }

        /**
         * Creates new form Frame_server
         */
        @Override
        public void run() {
            String message, chat = "Chat", connect = "Connect", disconnect = "Disconnect";
            String[] dataset;

            try {
                while ((message = reader.readLine()) != null) {
                    jTextArea1.append("recieved: " + message + "\n");
                    dataset = message.split(":");

                    for (String token : dataset) {
                        jTextArea1.append(token + "\n");
                    }
                    if (dataset[2].equals(connect)) {
                        tellEveryone((dataset[0] + ":" + dataset[1] + ":" + chat));
                    } else if (dataset[2].equals(disconnect)) {
                        tellEveryone((dataset[0] + ":is disconnected" + ":" + chat));
                        clientRemove(dataset[0]);
                    } else if (dataset[2].equals(chat)) {
                        tellEveryone(message);
                    } else {
                        jTextArea1.append("the conditions are not met. \n");
                    }
                }
            } catch (Exception e) {
                jTextArea1.append("Lost a connection! \n");
                e.printStackTrace();
                clientOutputStreams.remove(client);
            }
        }
    }

    public FrmServer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_connect1 = new javax.swing.JButton();
        btn_connect2 = new javax.swing.JButton();
        btn_connect3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_connect1.setBackground(new java.awt.Color(255, 0, 0));
        btn_connect1.setFont(new java.awt.Font("Bell Gothic Std Black", 1, 12)); // NOI18N
        btn_connect1.setText("Start");
        btn_connect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connect1ActionPerformed(evt);
            }
        });

        btn_connect2.setBackground(new java.awt.Color(255, 0, 0));
        btn_connect2.setFont(new java.awt.Font("Bell Gothic Std Black", 1, 12)); // NOI18N
        btn_connect2.setText("Stop");
        btn_connect2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connect2ActionPerformed(evt);
            }
        });

        btn_connect3.setBackground(new java.awt.Color(255, 0, 0));
        btn_connect3.setFont(new java.awt.Font("Bell Gothic Std Black", 1, 12)); // NOI18N
        btn_connect3.setText("Online Kullanıcılar");
        btn_connect3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connect3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_connect2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_connect1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btn_connect3)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_connect1)
                    .addComponent(btn_connect3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btn_connect2)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_connect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connect1ActionPerformed

        Thread starter = new Thread(new ServerStart());
        starter.start();

        jTextArea1.append("Server has started!! \n");
    }//GEN-LAST:event_btn_connect1ActionPerformed

    private void btn_connect2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connect2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_connect2ActionPerformed

    private void btn_connect3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connect3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_connect3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmServer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmServer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmServer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmServer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmServer().setVisible(true);
            }
        });
    }

    public class ServerStart implements Runnable {

        @Override
        public void run() {
            clientOutputStreams = new ArrayList();
            users = new ArrayList();

            try {
                ServerSocket serverS = new ServerSocket(1111);

                while (true) {
                    Socket clientS = serverS.accept();
                    PrintWriter writer = new PrintWriter(clientS.getOutputStream());
                    clientOutputStreams.add(writer);

                    Thread listener = new Thread(new ClientHandler(clientS, writer));
                    listener.start();
                    jTextArea1.append("Got a connection. \n");
                }
            } catch (Exception e) {
                jTextArea1.append("There is an error in creating a connection.\n");
            }
        }
    }

    public void clientAdd(String dataset) {
        String message, add = ": :Connect", done = "Server: :Done", name = dataset;
        jTextArea1.append("Before " + name + "added. \n");
        users.add(name);
        jTextArea1.append("After " + name + " added. \n");
        String[] temperoryList = new String[(users.size())];
        users.toArray(temperoryList);

        for (String token : temperoryList) {
            message = (token + add);
            tellEveryone(message);
        }
        tellEveryone(done);
    }

    public void clientRemove(String dataset) {
        String message, add = " : :Connect", done = "Server: :Done", name = dataset;
        users.remove(name);
        String[] temperoryList = new String[(users.size())];
        users.toArray(temperoryList);
        for (String token : temperoryList) {
            message = (token + add);
            tellEveryone(message);
        }
        tellEveryone(done);
    }

    public void tellEveryone(String message) {
        Iterator it = clientOutputStreams.iterator();

        while (it.hasNext()) {
            try {
                PrintWriter writer = (PrintWriter) it.next();
                writer.println(message);
                jTextArea1.append("Sending message to the client: " + message + "\n");
                writer.flush();
                jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
            } catch (Exception e) {
                jTextArea1.append("Error!! \n");
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btn_connect1;
    public javax.swing.JButton btn_connect2;
    public javax.swing.JButton btn_connect3;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
